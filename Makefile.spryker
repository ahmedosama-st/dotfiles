SDK = ./docker/sdk
CLI = $(SDK) cli
CONSOLE = $(SDK) console
BIN = ./vendor/bin
NPM = $(CLI) npm
COMPOSER = $(CLI) composer
COMMAND := $(filter-out $@,$(MAKECMDGOALS))

# Docker --------------------------------------------------------------------- #
up: ## If provided a file, boots with it then runs the up command
ifdef file
	$(SDK) boot $(file)
endif
	$(SDK) up

down:
	$(SDK) down

stop:
	$(SDK) stop

start:
	$(SDK) start

reset: ## Performs a full reset for the application
	make down;
	docker system prune -a --volumes -f;
	$(SDK) clean-data;
	$(SDK) clean;
	rm -rf src/Generated;
	rm -rf src/Orm;
	rm -rf vendor;
	rm -rf node_modules;
	make up;

destructive: ## Run destructive deployment ex: make destructive region=US
ifdef region
	$(CLI) vendor/bin/install -r $(region)/destructive.yml
else
	@echo "You must define a region for this command \nEx: make destructive region=US"
endif

# App ------------------------------------------------------------------------ #
generate: ## Generates transfers, propel and IDE completion
	$(CONSOLE) transfer:generate
	$(CONSOLE) propel:install
	make ide

ide: ## Generates ide completion
	$(CONSOLE) dev:ide-auto-completion:generate

import: ## Runs data import for either a specific file or all imports ex: make import importer="glossary"
ifdef importer
	$(CONSOLE) data:import:$(importer)
else
	$(CONSOLE) data:import
endif
	$(CONSOLE) queue:worker:start
	make cache

cache: ## Clears all the cache, rebuilds frontend and dumps composer autoload
	$(CONSOLE) cache:class-resolver:build
	$(CONSOLE) search:setup:source-map
	$(CONSOLE) cache:empty-all
	$(CONSOLE) navigation:build-cache
	$(CONSOLE) router:cache:warm-up:backoffice
	$(CONSOLE) router:cache:warm-up:backend-gatewaygg
	$(CONSOLE) translator:clean-cache
	$(CONSOLE) translator:generate-cache
	$(CONSOLE) twig:cache:warmer
	$(NPM) install
	$(NPM) run dev
	$(COMPOSER) dump-autoload -o

checkout: ## Sets up branch with new transfers, propel tables, imports and clears cache
	make generate
	make import
	make cache

composer: ## Run a composer command ex: make composer args="install"
	$(CLI) $(COMMAND)

console: ## Run a console command ex: make console args="code:phpstan"
	$(SDK) $(COMMAND)

test:
	$(CLI) codecept

npm: ## Run a npm command ex: make npm args="run dev"
	$(CLI) $(COMMAND)

# Linters-php ---------------------------------------------------------------- #
stan:
	$(CLI) $(BIN)/phpstan analyse -l 5 -c phpstan.neon --memory-limit=-1 src/

phpmd:
	$(CLI) $(BIN)/phpmd src/ text vendor/spryker/architecture-sniffer/src/ruleset.xml --minimumpriority 2

sniff:
ifeq (fix, $(filter fix,$(MAKECMDGOALS)))
	$(CONSOLE) code:sniff:style -f
else
	$(CONSOLE) code:sniff:style
endif

# Ci ------------------------------------------------------------------------- #
ci:
	make sniff;
	make stan;
	make phpmd;

%:
	@:
