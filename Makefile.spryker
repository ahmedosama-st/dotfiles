SDK = ./docker/sdk
CLI = $(SDK) cli
CONSOLE = $(SDK) console
BIN = ./vendor/bin
NPM = $(CLI) npm
COMPOSER = $(CLI) composer
COMMAND := $(filter-out $@,$(MAKECMDGOALS))
SHELL := /bin/zsh

# Docker --------------------------------------------------------------------- #
up: ## If provided a file, boots with it then runs the up command
ifdef file
	$(SDK) boot $(file)
endif
	$(SDK) up

down:
	$(SDK) down

stop:
	$(SDK) stop

start:
	$(SDK) start

reset: ## Performs a full reset for the application
	make down;
	$(SDK) prune --f --a;
	rm -rf src/Generated;
	rm -Rf data/cache/propel && rm -Rf src/Orm/Zed/*/*/Base/ && rm -Rf src/Orm/Zed/*/*/Map;
	rm -rf vendor;
	make up;

destructive: ## Run destructive deployment ex: make destructive region=US
ifdef region
	$(CLI) vendor/bin/install -r $(region)/destructive.yml
else
	@echo "You must define a region for this command \nEx: make destructive region=US"
endif

# App ------------------------------------------------------------------------ #
generate: ## Generates transfers, propel and IDE completion
	$(CONSOLE) transfer:generate
	$(CONSOLE) propel:install
	make ide

ide: ## Generates ide completion
	$(CONSOLE) dev:ide-auto-completion:generate

import: ## Runs data import for either a specific file or all imports ex: make import importer="glossary"
ifdef importer
	$(CONSOLE) data:import:$(importer)
else
	$(CONSOLE) data:import
endif
	$(CONSOLE) queue:worker:start
	make cache

cache: ## Clears all the cache, rebuilds frontend and dumps composer autoload
	$(COMPOSER) dump-autoload -o
	$(CONSOLE) cache:class-resolver:build
	$(CONSOLE) search:setup:source-map
	$(CONSOLE) cache:empty-all
	$(CONSOLE) navigation:build-cache
	$(CONSOLE) router:cache:warm-up:backoffice
	$(CONSOLE) router:cache:warm-up:backend-gateway
	$(CONSOLE) translator:clean-cache
	$(CONSOLE) translator:generate-cache
	$(CONSOLE) twig:cache:warmer

checkout: ## Sets up branch with new transfers, propel tables, imports and clears cache
	make generate
	make import
	make cache

composer: ## Run a composer command ex: make composer install
	$(CLI) $(COMMAND)

console: ## Run a console command ex: make console code:phpstan
	$(SDK) $(COMMAND)

cli: ## Run a console command ex: make cli spryk:run AddModule
	$(SDK) $(COMMAND)

npm: ## Run a npm command ex: make npm install
	$(CLI) $(COMMAND)

spryks:
	$(CLI) $(BIN)/spryk-dump --level=all

spryk:
	$(CLI) $(BIN)/spryk-run $(args)

deps:
	$(CONSOLE) dev:dependency:find ${module}

deps-fix:
	$(CONSOLE) dev:dependency:fix ${module}

# Linters-php ---------------------------------------------------------------- #
stan:
ifdef module
	$(CONSOLE) code:phpstan -m $(module) -l 5
else
	@echo "You must define a module for this command \nEx: make stan module=SprykerDemo.MerchantReview"
endif

phpmd:
ifdef module
	$(CONSOLE) code:sniff:architecture -m $(module) -p 2
else
	@echo "You must define a module for this command \nEx: make phpmd module=SprykerDemo.MerchantReview"
endif

sniff:
ifeq (fix, $(filter fix,$(MAKECMDGOALS)))
	$(CONSOLE) code:sniff:style -f -m $(module)
else
	$(CONSOLE) code:sniff:style -m $(module)
endif

# Ci ------------------------------------------------------------------------- #
ci:
	make sniff $(module);
	make stan $(module);
	make phpmd $(module);

%:
	@:
